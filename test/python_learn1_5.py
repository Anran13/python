# This is generated by Gemini Code Assist
# tools.py --> we define the module including self-defined functions
import tools
import tkinter as tk
from tkinter import ttk, messagebox
from tkinter import font

class BmiApp:
    """
    A simple GUI application to calculate Body Mass Index (BMI).
    """
    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("BMI Calculator")
        self.root.geometry("400x450")
        self.root.resizable(False, False) # Prevent window resizing

        # --- Setup Colors, Fonts, and Styles ---
        self.setup_theme()
        self.setup_styles()

        # --- Create Widgets ---
        self.create_widgets()

    def setup_theme(self):
        """Sets up the color and font theme for the application."""
        self.colors = {
            'primary': '#007BFF',      # Blue
            'secondary': '#6C757D',    # Gray
            'background': '#F8F9FA',   # Light Gray
            'surface': '#FFFFFF',      # White
            'text': '#212529',         # Dark Gray
            'success': '#28A745',      # Green
            'warning': '#FFC107',      # Yellow
            'danger': '#DC3545'        # Red
        }
        self.fonts = {
            'title': font.Font(family="Helvetica", size=20, weight="bold"),
            'heading': font.Font(family="Helvetica", size=12),
            'body': font.Font(family="Helvetica", size=11),
            'button': font.Font(family="Helvetica", size=12, weight="bold"),
            'result': font.Font(family="Helvetica", size=14, weight="bold")
        }
        self.root.configure(bg=self.colors['background'])

    def setup_styles(self):
        """Configures the ttk styles for the widgets."""
        style = ttk.Style(self.root)
        style.theme_use('clam')

        # General Frame style
        style.configure('TFrame', background=self.colors['background'])
        
        # Card-like Frame
        style.configure('Card.TFrame', background=self.colors['surface'], relief='raised', borderwidth=1)

        # Labels
        style.configure('TLabel', font=self.fonts['body'], background=self.colors['background'], foreground=self.colors['text'])
        style.configure('Title.TLabel', font=self.fonts['title'], background=self.colors['background'], foreground=self.colors['primary'])
        style.configure('Heading.TLabel', font=self.fonts['heading'], background=self.colors['surface'], foreground=self.colors['text'])

        # Result Labels with Colors
        style.configure('Result.TLabel', font=self.fonts['result'], background=self.colors['surface'])
        style.configure('Success.Result.TLabel', foreground=self.colors['success'])
        style.configure('Warning.Result.TLabel', foreground=self.colors['warning'])
        style.configure('Danger.Result.TLabel', foreground=self.colors['danger'])

        # Button
        style.configure('TButton', font=self.fonts['button'], foreground='white', background=self.colors['primary'], borderwidth=0, padding=10)
        style.map('TButton',
                  background=[('active', self.colors['secondary']), ('pressed', '!focus', self.colors['primary'])],
                  relief=[('pressed', 'sunken')])

        # Entry
        style.configure('TEntry', font=self.fonts['body'], padding=5)

    def create_widgets(self):
        """Creates and places all the widgets in the window."""
        # Main container
        main_frame = ttk.Frame(self.root, padding="20 20 20 10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # Title
        title_label = ttk.Label(main_frame, text="BMI Calculator", style='Title.TLabel')
        title_label.pack(pady=(0, 20))

        # Input Card
        input_card = ttk.Frame(main_frame, style='Card.TFrame', padding=20)
        input_card.pack(fill=tk.X, pady=10)
        input_card.columnconfigure(1, weight=1)

        # Height input
        ttk.Label(input_card, text="Height (cm):", style='Heading.TLabel').grid(row=0, column=0, sticky=tk.W, pady=10, padx=(0, 10))
        self.height_var = tk.StringVar()
        height_entry = ttk.Entry(input_card, textvariable=self.height_var, width=15)
        height_entry.grid(row=0, column=1, sticky=tk.EW, pady=10)
        height_entry.focus() # Set initial focus to this entry field

        # Weight input
        ttk.Label(input_card, text="Weight (kg):", style='Heading.TLabel').grid(row=1, column=0, sticky=tk.W, pady=10, padx=(0, 10))
        self.weight_var = tk.StringVar()
        weight_entry = ttk.Entry(input_card, textvariable=self.weight_var, width=15)
        weight_entry.grid(row=1, column=1, sticky=tk.EW, pady=10)

        # Calculate Button
        calc_button = ttk.Button(main_frame, text="Calculate BMI", command=self.calculate_and_display, style='TButton')
        calc_button.pack(fill=tk.X, pady=20)

        # Result Card
        result_card = ttk.Frame(main_frame, style='Card.TFrame', padding=20)
        result_card.pack(fill=tk.BOTH, expand=True)

        # Result Display
        self.result_var = tk.StringVar()
        self.result_label = ttk.Label(result_card, textvariable=self.result_var, style='Result.TLabel', justify=tk.CENTER)
        self.result_label.pack(pady=10, expand=True)

    def calculate_and_display(self):
        """Gets inputs, calls the calculation logic from tools.py, and displays the result."""
        try:
            height_cm_str = self.height_var.get()
            weight_kg_str = self.weight_var.get()

            if not height_cm_str or not weight_kg_str:
                messagebox.showwarning("Input Missing", "Please enter both height and weight.")
                return

            height_cm = int(height_cm_str)
            weight_kg = int(weight_kg_str)

            if height_cm <= 0 or weight_kg <= 0:
                messagebox.showwarning("Input Error", "Height and weight must be positive numbers.")
                return

            bmi = tools.caculate_bmi(height_cm, weight_kg)
            state = tools.get_state(bmi)

            # Determine result style based on state
            if state == "正常範圍":
                style_name = 'Success.Result.TLabel'
            elif state in ["體重過輕", "過重"]:
                style_name = 'Warning.Result.TLabel'
            else: # All levels of obesity
                style_name = 'Danger.Result.TLabel'

            # Update label style and text
            self.result_label.configure(style=style_name)
            self.result_var.set(f"Your BMI is: {bmi:.2f}\nStatus: {state}")

        except ValueError:
            self.result_var.set("") # Clear previous result
            self.result_label.configure(style='Result.TLabel') # Reset style
            messagebox.showerror("Input Error", "Please enter valid whole numbers for height and weight.")

if __name__ == '__main__':
    root = tk.Tk()
    app = BmiApp(root)
    root.mainloop()